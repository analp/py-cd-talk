def linting_pipeline() {
    return [
        stage("linting") {
            sh "tox -e linting"
        },
        stage("security") {
            sh "tox -e security"
        }
    ]
}

def tests_pipeline(def interpreter, def cov_option, def all) {
    return {    
        node() {
            checkout scm

            stage("unit tests") {
                withEnv(["COVERAGE_FILE=.coverage.unit.${interpreter}"]) {
                    sh "tox -e ${interpreter}-${cov_option} -- -m unit"
                }
            }
            
            if(all) {
                stage("integration tests") {
                    withEnv(["COVERAGE_FILE=.coverage.integration.${interpreter}"]) {
                        sh "tox -e ${interpreter}-${cov_option} -- -m integration"
                    }
                }

                stage("component tests") {
                    withEnv(["COVERAGE_FILE=.coverage.component.${interpreter}"]) {
                        sh "tox -e ${interpreter}-${cov_option} -- -m component"
                    }
                } 
                
                stage("acceptance tests") {
                    sh "tox -e ${interpreter}-specs"
                }
            }

            stash name: "coveragedata", includes: ".coverage.*"
        }
    }
}

interpreters = ["py35"]

def quick_build(def cov_option) {
    checkout scm

    def stages = linting_pipeline()

    def tests_branches = [:]
    for (interpreter in interpreters) {
        tests_branches[interpreter] = tests_pipeline(interpreter, "nocov", false)
    }
    stages.push(
        stage("tests") {
            parallel(tests_branches)
        }
    )

    return stages
}

def full_build() {
    checkout scm

    def stages = linting_pipeline()

    def tests_branches = [:]
    for (interpreter in interpreters) {
        tests_branches[interpreter] = tests_pipeline(interpreter, "cov", true)
    }

    stages.push(
        stage("tests") {
            parallel(tests_branches)
        }
    )

    stages.push(
        stage('coverage report') {
            dir("coveragedata") {
                unstash "coveragedata"
            }
            sh "tox -e coverage-report -- ./coveragedata"
        }
    )

    stages.push(
        stage("package") {
            sh "tox -e package"
        }
    )

    return stages
}

properties([
    pipelineTriggers([
        cron('H */6 * * *'),
        pollSCM('H/5 * * * *')
    ]),
    buildDiscarder(logRotator(daysToKeepStr: '30'))
])

branch = env.BRANCH_NAME

@NonCPS
def isTimerTriggered() {
    def timerTrigger = currentBuild.rawBuild.getCause(hudson.triggers.TimerTrigger$TimerTriggerCause)
    return !!timerTrigger
}

node() {
    def isTimerTriggered = isTimerTriggered()

    switch(branch) {
        case 'master':
            if (!isTimerTriggered) {
                full_build()
                deleteDir()
            }
            break

        case 'develop':
            full_build()
            deleteDir()
            break
        default:
            if (!isTimerTriggered) {
                quick_build("nocov")
                deleteDir()
            }
    }
}
