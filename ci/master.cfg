# -*- python -*-
# ex: set filetype=python:

import re
import itertools
from buildbot.plugins import (
    changes,
    schedulers,
    steps,
    worker,
    util)

c = BuildmasterConfig = {}

####### PROJECT IDENTITY

c['title'] = "ESPython2017"
c['titleURL'] = "https://github.com/bolsote/py-cd-talk"
c['buildbotURL'] = "http://127.0.0.1:8010/"

plugins = {
    'waterfall_view': {},
    'console_view': {},
    'grid_view': {}
}
c['www'] = dict(port=8010, plugins=plugins)

c['www']['authz'] = util.Authz(
    allowRules=[
        util.AnyControlEndpointMatcher(role="admins"),
    ],
    roleMatchers=[
        util.RolesFromUsername(roles=["admins"], usernames=["buildbot"])
    ]
)
c['www']['auth'] = util.UserPasswordAuth(
    {"buildbot": "buildbot"})

####### WORKERS

c['workers'] = []
c['workers'].append(worker.Worker("worker1", "workerpass1", max_builds=2))
c['workers'].append(worker.Worker("worker2", "workerpass2", max_builds=2))
c['workers'].append(worker.Worker("worker3", "workerpass3", max_builds=2))
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

c['change_source'] = []

# Poll from master and develop
c['change_source'].append(changes.GitPoller(
    'https://github.com/bolsote/py-cd-talk.git',
    workdir='build',
    branches=True,
    pollinterval=300))

####### BUILDERS

class BuildFactory(object):
    def __init__(self):
        self.pipeline = util.BuildFactory()

    def flags_repo(self):
        # Check out the source
        self.pipeline.addStep(steps.Git(
            name="clone_repo",
            repourl='https://github.com/bolsote/py-cd-talk.git',
            mode='full',
            haltOnFailure=True)
        )

        return self

    def linting(self):
        # run linting with tox
        linting_cmd = ["tox", "-e", "linting"]
        self.pipeline.addStep(steps.ShellCommand(
            name="linting",
            command=linting_cmd,
            haltOnFailure=True)
        )
    
        # run security checking
        security_cmd = ["tox", "-e", "security"]
        self.pipeline.addStep(steps.ShellCommand(
            name="security",
            command=security_cmd,
            haltOnFailure=True)
        )

        return self

    def tests(self, test_type, coverage):
        if coverage:
            tests_cmd = "tox -e {interpreter}-cov -- -m {test_type}"
        else:
            tests_cmd = "tox -e {interpreter}-nocov -- -m {test_type}"

        interpreters = ["pypy3", "py36"]
        for interpreter in interpreters:
            coverage_file=".coverage.{test_type}.{interpreter}".format(
                test_type=test_type,
                interpreter=interpreter
            )
            self.pipeline.addStep(steps.ShellCommand(
                name="{test_type} tests {interpreter}".format(
                    test_type=test_type,
                    interpreter=interpreter
                ),
                command=tests_cmd.format(
                    test_type=test_type,
                    interpreter=interpreter).split(),
                env={"COVERAGE_FILE": coverage_file},
                haltOnFailure=True
            ))

        return self

    def coverage(self):
        # Report coverage
        cov_cmd = ["tox", "-e", "coverage-report"]
        self.pipeline.addStep(steps.ShellCommand(
            name="coverage report",
            command=cov_cmd,
            warnOnWarnings=True)
        )

        return self

    def acceptance(self):
        acc_cmd = "tox -e {}-specs"

        interpreters = ["pypy3", "py36"]
        for interpreter in interpreters:
            self.pipeline.addStep(steps.ShellCommand(
                name="Acceptance tests {}".format(interpreter),
                command=acc_cmd.format(interpreter).split(),
                haltOnFailure=True
            ))

        return self

    def package(self):
        # Build package
        build_pkg_cmd = ["tox", "-e", "package"]
        self.pipeline.addStep(steps.ShellCommand(
            name="build package",
            command=build_pkg_cmd,
            haltOnFailure=True)
        )

        return self

    def performance(self):
        # Run benchmarks
        benchmarks_cmd = ["tox", "-e", "pypy3-benchmark"]
        self.pipeline.addStep(steps.ShellCommand(
            name="benchmarks pypy",
            command=benchmarks_cmd,
            haltOnFailure=True
        ))

        return self

def quick():
    factory = BuildFactory()
    factory.flags_repo()
    factory.linting()
    factory.tests("unit", False)

    return factory.pipeline

def release():
    factory = BuildFactory()
    factory.flags_repo()
    factory.linting()
    factory.tests("unit", True)
    factory.tests("integration", True)
    factory.tests("component", True)
    factory.acceptance()
    factory.coverage()
    factory.package()

    return factory.pipeline

def develop():
    factory = BuildFactory()
    factory.flags_repo()
    factory.linting()
    factory.tests("unit", True)
    factory.tests("integration", True)
    factory.tests("component", True)
    factory.acceptance()
    factory.coverage()
    factory.package()

    return factory.pipeline



def performance():
    factory = BuildFactory()
    factory.flags_repo()
    factory.performance()

    return factory.pipeline

workers = ["worker1", "worker2", "worker3"]

c['builders'] = []

c['builders'].append(
    util.BuilderConfig(
        name="continuous",
        workernames=workers,
        factory=quick()))

c['builders'].append(
    util.BuilderConfig(
        name="flags_master",
        workernames=workers,
        factory=release()))

c['builders'].append(
    util.BuilderConfig(
        name="flags_develop",
        workernames=workers,
        factory=develop()))

c['builders'].append(
    util.BuilderConfig(
        name="performance",
        workernames=workers,
        factory=performance()))

####### SCHEDULERS
def exclude_branches(branches):
    def branch_filter(branch):
        return branch not in branches

    return branch_filter
    
c['schedulers'] = []

# Launch a quick build for any branch that is not master
c['schedulers'].append(
    schedulers.AnyBranchScheduler(
        name="continuous",
        builderNames=["continuous"],
        change_filter=util.ChangeFilter(
            branch_fn=exclude_branches(['master'])),
        treeStableTimer=60))

# Launch a package build for every pull request to master
c['schedulers'].append(
    schedulers.SingleBranchScheduler(
        name="flags_master",
        change_filter=util.ChangeFilter(branch='master'),
        treeStableTimer=None,
        builderNames=["flags_master"]))

# Launch a full build every 3 hours for develop
c['schedulers'].append(
    schedulers.SingleBranchScheduler(
        name="flags_develop",
        change_filter=util.ChangeFilter(branch='develop'),
        treeStableTimer=None,
        builderNames=["flags_develop"]))

# Launch a performance build every 6 hours for develop
c['schedulers'].append(
    schedulers.Nightly(
        name="performance",
        change_filter=util.ChangeFilter(branch='develop'),
        builderNames=["performance"],
        onlyIfChanged=True,
        hour=range(0, 24, 6)))

force_reason=util.StringParameter(
    name="reason",
    label="reason:",
    required=True,
    size=80)

force_username=util.UserNameParameter(label="your name:", size=80)

c['schedulers'].append(
    schedulers.ForceScheduler(
    name="force",
    builderNames=["flags_master", "flags_develop", "performance"],
    reason=force_reason,
    username=force_username))

####### BUILDBOT SERVICES

c['services'] = []

####### DB URL

c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}
